#!/bin/bash

# This git post-commit hook automatically tags new versions of my Vim plug-ins.
# I always forget to define new tags but tags can be really handy for all sorts
# of things, so I decided to automate the creation of new tags.

REMOTE_REPO=$(git config --get remote.origin.url)
REPO_NAME=$(basename $REMOTE_REPO .git)

case $REPO_NAME in
  vim-easytags)        PLUGIN_FILE=autoload/xolox/easytags.vim;;
  vim-lua-ftplugin)    PLUGIN_FILE=autoload/xolox/lua.vim;;
  vim-lua-inspect)     PLUGIN_FILE=autoload/xolox/luainspect.vim;;
  vim-notes)           PLUGIN_FILE=autoload/xolox/notes.vim;;
  vim-publish)         PLUGIN_FILE=autoload/xolox/publish.vim;;
  vim-pyref)           PLUGIN_FILE=autoload/xolox/pyref.vim;;
  vim-python-ftplugin) PLUGIN_FILE=autoload/python_ftplugin.vim;;
  vim-reload)          PLUGIN_FILE=autoload/xolox/reload.vim;;
  vim-session)         PLUGIN_FILE=autoload/xolox/session.vim;;
  vim-shell)           PLUGIN_FILE=autoload/xolox/shell.vim;;
esac

if [ -n "$PLUGIN_FILE" ]; then
  BRANCH_NAME=$(git symbolic-ref HEAD 2>/dev/null | sed 's@^refs/heads/@@')
  VERSION_VARIABLE="$(echo -n $PLUGIN_FILE | sed -e 's@^autoload/@@' -e 's@\.vim$@@' -e 's@/@#@')#version"
  PLUGIN_VERSION=$(grep "let g:${VERSION_VARIABLE}" $PLUGIN_FILE | cut "-d'" -f2)
  EXISTING_TAGS="$(git tag -l $PLUGIN_VERSION)"
  if [ "$BRANCH_NAME" = master -a -n "$PLUGIN_VERSION" -a -z "$EXISTING_TAGS" ]; then
    git tag $PLUGIN_VERSION
  fi
fi
